//  Create additional controllers
function createAdditionalControllers() {
    //  Back url
    let btnBack = `
    <div class="row text-center m-1">
        <div class="col-sm-12">
            <button id="btn-back" role="button" class="btn btn-secondary btn-sm btn-block font-weight-bold">
                <i class="fa fa-chevron-left" aria-hidden="true"></i>
                &nbsp;
                Kembali
            </button>
        </div>
    </div>
    `;
    //  Previous signature
    let btnPrevSignature = `
        <button id="btn-prev-signature" role="button" class="btn btn-secondary btn-sm btn-block disabled">
            <i class="fa fa-arrow-left" aria-hidden="true"></i>
        </button>
    `;
    //  Next signature
    let btnNextSignature = `
        <button id="btn-next-signature" role="button" class="btn btn-secondary btn-sm btn-block disabled">
            <i class="fa fa-arrow-right" aria-hidden="true"></i>
        </button>
    `;
    //  Count signature
    let signatureCount = `
        <span id="current-signature"></span>
        <span>/</span>
        <span id="max-signature"></span>
    `;
    //  Row signature container
    let rowSignatureContainer = `
        <div class="row text-center m-1">
            <div id="row-btn-prev-signature" class="col-sm-4"></div>
            <div id="row-count-signature" class="col-sm-4"></div>
            <div id="row-btn-next-signature" class="col-sm-4"></div>
        </div>
    `;
    //  Create horizontal bar
    let horizontalBar = `<hr class="bg-secondary mt-3 mb-0">`;
    //  Create user name
    let userName = `
        <div id="user-name" class="text-center m-3">
            <span class="font-weight-bold">
                Peserta Pengesahan:
            </span><br><br>
            <span>
                {{ $signature->user->full_name_with_degree }}
            </span>
        </div>
    `
    //  Create additional buttons and elements
    $("#additional-controllers").append(btnBack);
    $("#additional-controllers").append(horizontalBar);
    $("#additional-controllers").append(userName);
    $("#additional-controllers").append(rowSignatureContainer);
    $("#row-btn-prev-signature").append(btnPrevSignature);
    $("#row-count-signature").append(signatureCount);
    $("#row-btn-next-signature").append(btnNextSignature);
    $("#additional-controllers").append(horizontalBar);
    //  Change controller title
    $("#controller-title").empty();
    $("#controller-title").append(`
        <i class="fa fa-qrcode" aria-hidden="true"></i>
        &nbsp;
        QR Editor
    `);
    //  Reset previous button
    if ("{{ $prevIndex }}" !== "false") {
        if ($("#btn-prev-signature").hasClass("disabled")) {
            $("#btn-prev-signature").removeClass("disabled")
        }
    }
    //  Reset next button
    if ("{{ $nextIndex }}" !== "false") {
        if ($("#btn-next-signature").hasClass("disabled")) {
            $("#btn-next-signature").removeClass("disabled")
        }
    }
    //  Button back on click
    $("#btn-back").on("click", (event) => {
        event.preventDefault();
        window.location.replace("{{ route('document.signature.index', ['document' => $document->id]) }}");
    });
    //  Button previous signature on click
    $("#btn-prev-signature").on("click", (event) => {
        event.preventDefault();
        if (!$("#btn-prev-signature").hasClass("disabled")) {
            window.location.replace("{{ $prevIndex }}");
        }
    });
    //  Button next signature on click
    $("#btn-next-signature").on("click", (event) => {
        event.preventDefault();
        if (!$("#btn-next-signature").hasClass("disabled")) {
            window.location.replace("{{ $nextIndex }}");
        }
    });
    //  Current signature text
    $("#current-signature").append("{{ $currentIndex }}");
    //  Max signature text
    $("#max-signature").append("{{ $maxIndex }}");
}

//  Render PDF and elements
function renderPDFAndElements() {
    //  Resize to milimeters
    function resizeToMilimeters(value) {
        return value >= 0 ? (value * 0.35294118) : 0;
    }
    //  Resize to pixels
    function resizeToPixels(value) {
        return value >= 0 ? (value / 0.35294118) : 0;
    }
    //  Create PDF Editor
    let rdwfPDFEditor = new RDWPDFEditor({
        source: $('#workspace-editor').attr('data-source'),
        canvasId: "pdf-editor",
        buttonWorkspace: "button-workspace",
        canvasWorkspace: "canvas-top-layer",
    });
    //  Create templates
    rdwfPDFEditor.templates = [
        //  QR Code
        new Template("qr", "QR", rdwfPDFEditor.pdfEditor)
            .createElement(rdwfPDFEditor.buttonWorkspace, {
                type: "primary",
                icon: "qrcode",
                text: "Kode QR",
            })
            .createableElementObject(rdwfPDFEditor.canvasWorkspace, {
                image: $(`meta[name='qr-image']`).attr('content'),
                noOptions: true,
                isQR: true,
            }),
    ];
    //  Render PDF and templates
    rdwfPDFEditor.renderPDF();
    //  Create existing elements
    if (`<?php echo $signature->pos_x; ?>` != "") {
        //  Create temporary element
        var existingElement = new Element({
            template: rdwfPDFEditor.templates[0],
            workspaceId: "canvas-top-layer",
            id: "element-" + rdwfPDFEditor.templates[0].name + "-template-" + (rdwfPDFEditor.templates[0].elements.length + 1),
            image: "{{ asset('assets/img/qr.png') }}",
            color: "rgba(0, 103, 172, 0.5)",
            posX: resizeToPixels(`<?php echo $signature->pos_x; ?>`),
            posY: resizeToPixels(`<?php echo $signature->pos_y; ?>`),
            width: resizeToPixels(`<?php echo $signature->size; ?>`),
            height: resizeToPixels(`<?php echo $signature->size; ?>`),
            size: resizeToPixels(`<?php echo $signature->size; ?>`),
            page: `<?php echo $signature->page; ?>`,
        });
        existingElement.createElement({
            onDblClick: () => {
                if (!$("#form-submit").hasClass("hidden")) {
                    $("#form-submit").addClass("hidden");
                }
            },
            onDrag: () => {
                if ($("#btn-submit").hasClass("hidden")) {
                    $("#btn-submit").removeClass("hidden");
                }
            }
        });
        rdwfPDFEditor.templates[0].elements.push(existingElement);
        if (!$("#" + rdwfPDFEditor.templates[0].id).hasClass("hidden")) {
            $("#" + rdwfPDFEditor.templates[0].id).addClass("hidden");
        }
        //  Enable form submit
        if ($("#form-submit").hasClass("hidden")) {
            $("#form-submit").removeClass("hidden");
        }
        //  Hide submit button
        if (!$("#btn-submit").hasClass("hidden")) {
            $("#btn-submit").addClass("hidden");
        }
        //  Change submit button
        $("#btn-submit").removeClass("btn-success");
        $("#btn-submit").addClass("btn-warning text-dark font-weight-bold");
        $("#btn-submit").empty();
        $("#btn-submit").append(`
            <i class="fa fa-pencil-alt" aria-hidden="true"></i>
            &nbsp;
            Update Template
        `);

    }
    //  Create restricted elements
    if (`<?php echo $signatures->isNotEmpty(); ?>` == 1) {
        var signatures = JSON.parse(`<?php echo $signatures; ?>`);
        for (let i in signatures) {
            if (signatures[i].pos_x != null) {
                //  Create temporary element
                var restrictElement = new Element({
                    template: rdwfPDFEditor.templates[0],
                    workspaceId: "canvas-top-layer",
                    id: "restrict-element-",
                    image: "{{ asset('assets/img/qr.png') }}",
                    color: "rgba(255, 0, 0, 0.5)",
                    restricted: true,
                    posX: resizeToPixels(signatures[i].pos_x),
                    posY: resizeToPixels(signatures[i].pos_y),
                    width: resizeToPixels(signatures[i].size),
                    height: resizeToPixels(signatures[i].size),
                    size: resizeToPixels(signatures[i].size),
                    page: signatures[i].page,
                });
                restrictElement.createElement();
            }
        }
    }
    //  Submit QR Code
    $("#btn-submit").on("click", (event) => {
        //  Get QR Template
        var elementQRData = rdwfPDFEditor.templates[0].elements[0];
        //  Get width and height in milimeters
        var width = `<?php echo $pageSize["width"] ?>`;
        var height = `<?php echo $pageSize["height"] ?>`;
        //  Parse data
        var data = {
            posX: elementQRData.posX / rdwfPDFEditor.pdfEditor.canvas.width * width,
            posY: elementQRData.posY / rdwfPDFEditor.pdfEditor.canvas.height * height,
            size: resizeToMilimeters(elementQRData.size / rdwfPDFEditor.pdfEditor.scale),
        };
        //  Execute ajax
        $.ajax({
            method: "POST",
            url: "{{ route('document.signature.update-qr', ['document' => $document->id, 'signature' => $signature->id]) }}",
            data: {
                _token: $(`meta[name="csrf-token"]`).attr("content"),
                posX: data.posX,
                posY: data.posY,
                size: data.size,
                page: elementQRData.page,
            },
            success: function (response) {
                window.location.reload();
            }
        });
    });
}

//  Execute create additional controllers function
// createAdditionalControllers();
//  Execute render PDF and elements function
renderPDFAndElements();

class Modal {

    static TYPES = ['primary', 'secondary', 'dark', 'info', 'success', 'warning', 'danger'];
    static SIZES = ['sm', 'md', 'lg', 'xl'];

    static initialize(data) {

        //  Dispose sweet modal if exists
        if ($("#sweet-modal")) {
            Modal.dispose();
        }

        // Create the main modal container
        const modalContainer = document.createElement('div');
        modalContainer.classList.add('modal', 'fade');
        modalContainer.setAttribute('id', 'sweet-modal');
        modalContainer.setAttribute('role', 'dialog');
        modalContainer.setAttribute('data-backdrop', 'static');
        modalContainer.setAttribute('data-keyboard', 'false');

        // Create the modal dialog container
        const modalDialog = document.createElement('div');
        modalDialog.classList.add('modal-dialog');
        modalDialog.setAttribute('role', 'document');
        modalContainer.appendChild(modalDialog);

        // Create the modal content container
        const modalContent = document.createElement('div');
        modalContent.classList.add('modal-content', 'border-0');
        modalDialog.appendChild(modalContent);

        // Create the modal header
        const modalHeader = document.createElement('div');
        modalHeader.classList.add('modal-header');
        modalContent.appendChild(modalHeader);

        // Create the modal title
        const modalTitle = document.createElement('h5');
        modalTitle.classList.add('modal-title', 'font-weight-bold', 'text-light');
        modalTitle.textContent = 'Title';
        modalHeader.appendChild(modalTitle);

        // Create the close button
        const closeButton = document.createElement('button');
        closeButton.classList.add('close');
        closeButton.setAttribute('type', 'button');
        closeButton.setAttribute('data-dismiss', 'modal');
        closeButton.setAttribute('aria-label', 'Close');
        modalHeader.appendChild(closeButton);

        // Add the close button icon
        const closeIcon = document.createElement('span');
        closeIcon.setAttribute('aria-hidden', 'true');
        closeIcon.innerHTML = '&times;';
        closeButton.appendChild(closeIcon);

        // Create the modal body
        const modalBody = document.createElement('div');
        modalBody.classList.add('modal-body');
        modalContent.appendChild(modalBody);

        // Create the modal footer
        const modalFooter = document.createElement('div');
        modalFooter.classList.add('modal-footer');
        modalContent.appendChild(modalFooter);

        // Create the "Tutup" button
        const closeButtonModal = document.createElement('button');
        closeButtonModal.classList.add('btn', 'btn-close-modal', 'rounded-pill', 'btn-outline-secondary');
        closeButtonModal.setAttribute('type', 'button');
        closeButtonModal.setAttribute('data-dismiss', 'modal');
        closeButtonModal.textContent = 'Tutup';
        modalFooter.appendChild(closeButtonModal);

        // Create the "Simpan" button
        const submitButton = document.createElement('button');
        submitButton.classList.add('btn', 'btn-submit-modal', 'rounded-pill', 'btn-primary');
        submitButton.setAttribute('type', 'button');
        submitButton.textContent = 'Simpan';
        modalFooter.appendChild(submitButton);

        // Add the modal to the page
        document.body.appendChild(modalContainer);

        //  Append data
        if (data) {
            Modal.setStyle(data.style);
            Modal.setModalBody(data.body);
        }

        return this;
    }

    static setStyle(style) {
        const $modalHeader = $("body .modal-header");
        const $submitBtn = $("body .btn-submit-modal");
        const $modalDialog = $("body .modal-dialog");
        const $modalTitle = $("body .modal-title");

        Modal.TYPES.forEach(e => $modalHeader.removeClass("bg-gradient-" + e));
        Modal.TYPES.forEach(e => $submitBtn.removeClass("btn-" + e));

        Modal.SIZES.forEach(e => $modalDialog.removeClass("modal-" + e));
        $modalHeader.addClass("bg-gradient-" + style.type);
        $submitBtn.addClass("btn-" + style.type);
        $modalDialog.addClass("modal-" + style.size);

        $modalTitle.text(style.title);
        if (style.submitButtonText !== undefined) {
            $submitBtn.text(style.submitButtonText);
            $submitBtn.removeClass("hidden");
        } else {
            $submitBtn.addClass("hidden");
        }

        return this;
    }

    static setModalBody(body) {
        $.ajax({
            method: "GET",
            url: body.url,
            success: function (response) {
                $("body .modal-body").html(response);
            }
        });
    }

    static show() {
        $("#sweet-modal").modal("show");
        return this;
    }

    static hide() {
        $("#sweet-modal").modal("hide");
        return this;
    }

    static clearModalBody() {
        $(".modal-body").empty();
        return this;
    }

    static dispose() {
        $("#sweet-modal").remove();
    }
}

class SweetAlert {

    static CONFIRM_BUTTON_COLOR = "#0067ac";
    static CANCEL_BUTTON_COLOR = "#d33";

    static fireLoading(loadingData) {
        return Swal.fire({
            showCancelButton: false,
            showConfirmButton: false,
            allowOutsideClick: false,
            backdrop: true,
            title: loadingData.title,
            text: loadingData.text
        });
    }

    static fireError(errorData) {
        return Swal.fire({
            showCancelButton: false,
            showConfirmButton: false,
            allowOutsideClick: true,
            backdrop: true,
            timer: 3000,
            icon: 'error',
            title: "Oops. Terjadi Kesalahan Sistem.",
            text: errorData.text,
            confirmButtonColor: SweetAlert.CONFIRM_BUTTON_COLOR,
        });
    }

    static fireSuccess(successData) {
        return Swal.fire({
            showCancelButton: false,
            showConfirmButton: false,
            allowOutsideClick: true,
            backdrop: true,
            confirmButtonColor: SweetAlert.CONFIRM_BUTTON_COLOR,
            timer: 1500,
            icon: 'success',
            title: "Berhasil",
            text: successData.text,
        });
    }

    static fireWithConfirmation(style) {
        return Swal.fire({
            title: style.title,
            text: style.text,
            icon: 'warning',
            showCancelButton: true,
            allowOutsideClick: false,
            backdrop: true,
            confirmButtonColor: SweetAlert.CONFIRM_BUTTON_COLOR,
            cancelButtonColor: SweetAlert.CANCEL_BUTTON_COLOR,
            confirmButtonText: "Ya",
            cancelButtonText: "Tidak",
        });
    }
}

class SweetModal {

    static process(processing) {
        SweetAlert.fireLoading(processing.loadingData);

        $("form")
            .children()
            .removeClass("has-error")
            .find(".help-block")
            .remove();

        $("form")
            .find("input, select, textarea")
            .removeClass("is-invalid");

        let formData = null;

        if (typeof processing.data === 'function') {
            formData = processing.data();
            formData.append("_method", "POST");
            formData.append("_token", $('meta[name="csrf-token"]').attr('content'));
        } else if (typeof processing.data === 'object') {
            formData = processing.data;
            formData._method = "POST";
            formData._token = $('meta[name="csrf-token"]').attr('content');
        } else {
            formData = $(".modal-body form").serializeArray();
            formData.push({ name: '_method', value: 'POST' });
            formData.push({ name: '_token', value: $('meta[name="csrf-token"]').attr('content') });
        }

        let ajaxData = {
            method: "POST",
            url: processing.url !== undefined ? processing.url : $(".modal-body form").attr("action"),
            data: formData,
            success: function (response) {
                if (response.success) {
                    SweetAlert.fireSuccess({ text: response.message });
                    if (processing.after !== undefined) {
                        processing.after();
                    }
                    if (processing.redirect) {
                        window.location.href = response.redirect;
                    }
                    Modal.hide();
                } else {
                    SweetAlert.fireError({ text: response.message });
                }
            },
            error: function (xhr) {
                var jsonXHR = xhr.responseJSON;

                if ($.isEmptyObject(jsonXHR) == false) {
                    $.each(jsonXHR.errors, function (key, value) {
                        $("#" + key)
                            .closest(".with-validation")
                            .addClass("has-error")
                            .append(`<span class="help-block text-danger"><small>${value}</small></span>`);
                        $("#" + key).addClass("is-invalid");
                    });
                }

                SweetAlert.fireError({ text: "" });
            }
        }

        if (typeof processing.data === 'function') {
            let additionalAjaxData = {
                cache: false,
                contentType: false,
                processData: false,
            };
            Object.assign(ajaxData, additionalAjaxData);
        }

        $.ajax(ajaxData);
    }

    static launch(data) {
        if (data.modal != undefined) {
            Modal.initialize(data.modal).show();
            $("body").on("click", ".btn-submit-modal", function () {
                SweetAlert.fireWithConfirmation(data.swal)
                    .then(function (result) {
                        if (result.value) {
                            SweetModal.process(data.processing);
                        }
                    });
            });
        } else {
            SweetAlert.fireWithConfirmation(data.swal)
                .then(function (result) {
                    if (result.value) {
                        SweetModal.process(data.processing);
                    }
                });
        }
    }

}
